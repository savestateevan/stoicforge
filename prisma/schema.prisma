generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
  // Note: Connection pooling should be configured at the application level
  // For PlanetScale, see: https://planetscale.com/docs/tutorials/connect-nextjs-app
}

model User {
  id                 String            @id
  email              String            @unique
  name               String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  credits            Int               @default(0)
  userSubscriptionId String?
  isActiveSubscriber Boolean           @default(false)
  subscriptionType   SubscriptionType?
  prompts            Prompt[]
  subscription       UserSubscription? @relation
  profile            Profile?
  studySessions      StudySession[]
  tasks              Task[]
  studyMaterials     StudyMaterial[]
  progress           UserProgress?
  messages           Message[]
}

model Profile {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  name                   String?
  imageUrl               String?  @db.Text
  email                  String?  @db.Text
  bio                    String?  @db.Text
  twitch                 String?  @db.Text
  youtube                String?  @db.Text
  instagram              String?  @db.Text
  twitter                String?  @db.Text
  status                 String?  @default("active")
  isPublic               Boolean  @default(false)
  stripeConnectAccountId String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  credits                Int      @default(0)
  user                   User?    @relation(fields: [userId], references: [id])
}

model Prompt {
  id         String    @id @default(cuid())
  content    String    @db.Text
  framework  Framework
  userId     String
  isArchived Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model StudySession {
  id      String   @id @default(cuid())
  userId  String
  subject String
  hours   Float
  date    DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Task {
  id        String    @id @default(cuid())
  userId    String
  title     String
  completed Boolean   @default(false)
  dueDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model StudyMaterial {
  id        String   @id @default(cuid())
  userId    String
  title     String
  type      String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model UserProgress {
  id          String   @id @default(cuid())
  userId      String   @unique
  percentage  Int      @default(0)
  lastUpdated DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
  createdAt              DateTime  @default(now())
  updatedAt              DateTime? @updatedAt
  name                   String?
  email                  String?
  credits                Int       @default(100)
  user                   User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model UserApiLimit {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  role      String
  mentorId  String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum SubscriptionType {
  FREE
  BEGINNER
  PRO
  LEGACY
}

enum Framework {
  RTF
  TAG
  BAB
  CARE
  RISE
}
